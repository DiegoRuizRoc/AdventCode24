#include <fstream>
#include <iostream>
#include <string>
#include <unordered_set>
#include <unordered_map>
#include <vector>

struct Punto {
    int fila;
    int columna;
    
    Punto(int f, int c) : fila(f), columna(c) {}
    
    bool operator == (const Punto& p) const {
        return fila == p.fila && columna == p.columna;
    }
    
    bool operator < (const Punto& p) const {
        return fila < p.fila || (fila == p.fila && columna < p.columna);
    }
};

struct Hasher {
    std::size_t operator () (const Punto& p) const {
        return std::hash<int>()(p.fila) ^ (std::hash<int>()(p.columna) << 1);
    }
};

bool esta_en_mapa(const Punto& p, const std::vector<std::string>& mapa ) {
    return p.fila >= 0 && p.fila < mapa.size() && p.columna >= 0 && p.columna < mapa[0].size();
}

const std::vector<Punto> movimientos = {
    Punto(1, 0),
    Punto(0, 1),
    Punto(-1, 0),
    Punto(0, -1)
};

void buscar(const Punto& p, const std::vector<std::string>& mapa, int& cuenta) {
    const auto valor = mapa[p.fila][p.columna];
    for (const auto& movimiento : movimientos) {
        const auto nuevo_p = Punto(p.fila + movimiento.fila, p.columna + movimiento.columna);
        if (!esta_en_mapa(nuevo_p, mapa)) continue;
        if (mapa[nuevo_p.fila][nuevo_p.columna] != valor + 1) continue;
        if (mapa[nuevo_p.fila][nuevo_p.columna] == '9') {
            cuenta++;
            continue;
        }
        buscar(nuevo_p, mapa, cuenta);
    }
}

int main(int argc, char* argv[]) {
    std::string entrada = "dia_10_input";
    if (argc > 1) {
        entrada = argv[1];
    }

    std::ifstream archivo(entrada);
    std::string linea;
    int respuesta = 0;    
    std::vector<std::string> mapa;
    std::vector<Punto> puntos_inicio;

    while (std::getline(archivo, linea)) {
        for (int idx = 0; idx < linea.size(); ++idx) {
            if (linea[idx] == '0') puntos_inicio.emplace_back(mapa.size(), idx);
        }
        mapa.push_back(linea);
    }

    for (const auto& punto_inicio : puntos_inicio) {
        buscar(punto_inicio, mapa, respuesta);
    }
    
    std::cout << respuesta << '\n';

    return 0;
}
