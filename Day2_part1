#include <iostream>
#include <fstream>
#include <sstream>
#include <vector>
#include <string>

int main() {
    std::ifstream archivo("day2_puzzle");  // Abrir el archivo
    if (!archivo.is_open()) {
        std::cerr << "No se pudo abrir el archivo" << std::endl;
        return 1;  // Salir si no se pudo abrir el archivo
    }

    std::vector<std::vector<int>> filas;  // Vector para almacenar las filas (vectores)
    std::string linea;

    // Leer cada línea del archivo
    while (std::getline(archivo, linea)) {
        std::vector<int> fila;  // Crear un vector para almacenar los números de la fila
        std::istringstream stream(linea);  // Usar un istringstream para separar los números en la línea
        int numero;

        // Leer los números de la línea
        while (stream >> numero) {
            fila.push_back(numero);  // Añadir el número al vector de la fila
        }

        filas.push_back(fila);  // Añadir la fila al vector de filas
    }

    archivo.close();  // Cerrar el archivo
    int a=0,b=0,res=0;

    // Mostrar los números leídos
    std::cout << "Números leídos del archivo:" << std::endl;
    for (size_t i = 0; i < filas.size(); ++i) {
        std::cout << "Fila " << i + 1 << ": ";
        for (int z = 0; z<filas[i].size() - 1; z++) {
            
            if(filas[i][z]<filas[i][z+1]){
                
                if(filas[i][z+1] - filas[i][z] <=3 ){
                    a++;
                }
                
            }

        }
        
        if(a == filas[i].size()-1){
                res++;
                std::cout<<res;
            }
        a=0;
        
        for (int j = 0; j<filas[i].size() - 1; j++) {
            
            if(filas[i][j]>filas[i][j+1]){
                
                if(filas[i][j] - filas[i][j+1] <=3 ){
                    b++;
                }
                
            }
        }
        
        if(b == filas[i].size()-1){
                res++;
                std::cout<<res;
            }
        b=0;
        
        std::cout << std::endl;
    }

    return 0;
}
